@page "/remaining/"
@using System.Timers
@using TimeCalculator
@inject TimeService TimeService
@inject IComponentContext ComponentContext
@inject IJSRuntime JsRuntime

<h1>@WelcomeString</h1>

<p>This component demonstrates nothing at all.</p>
<p>@Now</p>

@if (TimeData == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else
{
    <table class="table">
        <thead>
        <tr>
            <th>Target Date</th>
            <th>Time Left</th>
            <th>Working Time Left</th>
            <th>Hours Left</th>
            <th>Days Left</th>
            <th>Working Days Left</th>
            <th>Working Hours Left</th>
        </tr>
        </thead>
        <tbody>
        <tr>
            <td>@TimeData.TargetDate</td>
            <td>@TimeData.TimeSpan.ToString(@"dd\.hh\:mm\:ss\.f")</td>
            <td>@TimeData.BdSpan.ToString(@"dd\.hh\:mm\:ss")</td>
            <td>@TimeData.Hours</td>
            <td>@TimeData.Days</td>
            <td>@TimeData.WorkingDays</td>
            <td>@TimeData.WorkingHours</td>
        </tr>
        </tbody>
    </table>
}

@code {
    private TimeData TimeData { get; set; }
    private Timer Timer { get; set; }
    private int Offset { get; set; }
    private bool OffsetInitialized { get; set; }
    private DateTime TargetTime { get; set; }
    
    private string Now { get; set; }
    private string WelcomeString { get; set; } = "You don't see this, your eyes are lying";

    protected override async Task OnInitializedAsync()
    {
        Timer = new Timer
        {
            AutoReset = true,
            Interval = 50
        };

        Timer.Elapsed += OnTimer;
        
        await Task.Run(() => Timer.Start());
    }

    protected override async Task OnAfterRenderAsync()
    {
        if (!ComponentContext.IsConnected)
            return;

        if (OffsetInitialized)
            return;
        
        Offset = await JsRuntime.InvokeAsync<int>("getTimezoneOffset");
        OffsetInitialized = true;

        var localTime = DateTime.UtcNow.AddMinutes(-Offset);
        RefreshTargetTime(localTime);
    }

    private async void OnTimer(object state, ElapsedEventArgs args)
    {
        var localTime = GetLocalTime();
        if (localTime > TargetTime)
        {
            RefreshTargetTime(localTime);
        }
            
        Now = localTime.ToLongTimeString();
        TimeData = await TimeService.GetTime(localTime, TargetTime);

        await InvokeAsync(StateHasChanged);
    }

    private DateTime GetLocalTime()
    {
        return DateTime.UtcNow.AddMinutes(-Offset);
    }

    private void RefreshTargetTime(DateTime localTime)
    {
        TargetTime = TimeService.GetNextTargetDate(localTime, out var season);
        WelcomeString = $"Time remaining until the end of {season}";
    }

}