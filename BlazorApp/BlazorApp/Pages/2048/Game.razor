@using Game2048

@inject IJSRuntime JsRuntime
@inject IComponentContext ComponentContext
@inject GameState GameState
@implements IDisposable

<div class="game" id="game">
    <div id="game-board">
        <div class="status">
            <span>Score: @GameState.Score</span>
        </div>
        <div class="status">
        </div>
        <div class="game-info">
            <span>@(GameState.IsStarted && !GameState.IsMoved ? "Nothing has moved" : null)</span>
        </div>
        <Board Squares="@GameState.Squares" />
    </div>
</div>

@code {
    private bool IsHandlerRegistered { get; set; }
    private int ClientX { get; set; }
    private int ClientY { get; set; }

    [JSInvokable]
    public async Task KeyDown(string code)
    {
        switch (code)
        {
            case "ArrowUp":
                MoveHelper.HandleUp(GameState);
                break;
                
            case "ArrowRight":
                MoveHelper.HandleRight(GameState);
                break;
                
            case "ArrowDown":
                MoveHelper.HandleDown(GameState);
                break;
                
            case "ArrowLeft":
                MoveHelper.HandleLeft(GameState);
                break;
                
            default:
                return;
        }
        
        if (GameState.IsMoved)
        {
            GameState.Squares = GameManager.GenerateNewSquare(GameState.Squares);
        }

        await InvokeAsync(StateHasChanged);
    }
    
    [JSInvokable]
    public async Task TouchStart(int clientX, int clientY)
    {
        ClientX = clientX;
        ClientY = clientY;

        await Task.Yield();
    }
    
    [JSInvokable]
    public async Task TouchEnd(int clientX, int clientY)
    {
        var xDiff = clientX - ClientX;
        var yDiff = clientY - ClientY;
        
        if (xDiff == 0 && yDiff == 0)
            return;
        
        if (Math.Abs(xDiff) > Math.Abs(yDiff))
        {
            if (xDiff > 0)
            {
                MoveHelper.HandleRight(GameState);
            }
            else if (xDiff < 0)
            {
                MoveHelper.HandleLeft(GameState);
            }
        }
        else
        {
            if (yDiff > 0)
            {
                MoveHelper.HandleDown(GameState);
            }
            else if (yDiff < 0)
            {
                MoveHelper.HandleUp(GameState);
            }
        }
        
        if (GameState.IsMoved)
        {
            GameState.Squares = GameManager.GenerateNewSquare(GameState.Squares);
        }

        await InvokeAsync(StateHasChanged);
    }

    public async void Dispose()
    {
        if (!IsHandlerRegistered)
            return;

        await JsRuntime.InvokeAsync<object>("DeregisterCsHandlers");
        IsHandlerRegistered = false;
    }

    protected override void OnAfterRender()
    {
        if (!ComponentContext.IsConnected)
            return;

        if (IsHandlerRegistered)
            return;

        JsRuntime.InvokeAsync<object>(
            "RegisterCsHandlers",
            DotNetObjectRef.Create(this));

        IsHandlerRegistered = true;
    }

}